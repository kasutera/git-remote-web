#!/bin/bash
set -e

REMOTE=origin
PROGNAME=git-remote-web

# dealing with git alias
[ ! -z "$GIT_PREFIX" ] \
    && cd "$GIT_PREFIX"

git rev-parse 2> /dev/null \
    || { echo "${PROGNAME}: not a git repository" 1>&2; exit 1; }

# refer: https://qiita.com/hidekuro/items/f461b683699d264372ee
usage_exit() {
    cat <<_EOS_ 1>&2

  Usage: $PROGNAME [OPTIONS...] path

  OPTIONS:
    -h, --help
    --remote=REMOTE             specify remote name (default: origin)
    -b, --branch                branch URL
    -c, --commit                commit URL of current HEAD
    -p, --pull-request          pull request URL into master
    -o, --open                  open URL with browser

_EOS_
    exit 1
}

declare -i argc=0
declare -a argv=()

while (( $# > 0 )); do
    case "$1" in
        - | -- )
            # オプション終端
            shift
            argc+=$#
            argv+=("$@")
            break
            ;;

        --* )
            # ロングオプション
            opt_name="${1#--}"
            opt_name="${opt_name%%=*}"

            delim_by_space=true
            opt_value=""
            if [[ "$1" =~ = ]]; then
                delim_by_space=false
                opt_value="${1#*=}"
            fi

            case "$opt_name" in
                'help' )
                    usage_exit
                    ;;

                'branch' )
                    OPT_BRANCH=1
                    ;;

                'commit' )
                    OPT_COMMIT=1
                    ;;

                'pull-request' )
                    OPT_PR=1
                    #PR_BRANCH="$opt_value"
                    #[ "${PR_BRANCH}" = "" ] && PR_BRANCH=master
                    ;;

                'open' )
                    OPT_OPEN=1
                    ;;

                'remote' )
                    REMOTE="$opt_value"
                    [ "${REMOTE}" = "" ] \
                        && { echo "${PROGNAME}: specify remote name" 1>&2 ; exit 1; }

                    git remote \
                        | grep "${REMOTE}" > /dev/null \
                        || { echo "${PROGNAME}: ${REMOTE} is invalid" 1>&2 ; exit 1; }
                    ;;
            esac
            ;;

        -* )
            # ショートオプション
            for (( i=1; i < ${#1}; i++ )); do
                opt_name="${1:$i:1}"
                case "$opt_name" in
                    'h' )
                        usage_exit
                        ;;

                    'b' )
                        OPT_BRANCH=1
                        ;;

                    'c' )
                        OPT_COMMIT=1
                        ;;

                    'p' )
                        OPT_PR=1
                        ;;

                    'o' )
                        OPT_OPEN=1
                        ;;
                esac
            done
            ;;

        * )
            # 実引数
            (( ++argc ))
            argv+=("$1")
            ;;
    esac
    shift
done



judge_ssh_http() {
    # http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_435
    #   "the value is composed of characters from the portable filename character set"
    git config --get remote.$1.url \
        | awk '
{
    if($0 ~ /^http:/)
        print "http"
    else if($0 ~ /^https:/)
        print "http"
    else if($0 ~ /[A-Za-z0-9._-]*@github.com/)
        print "ssh"
    else if($0 ~ /[A-Za-z0-9._-]*@bitbucket.org/)
        print "ssh"
    else print "not supported"
}
'
}

get_remote_ssh() {
    git config --get remote.$1.url \
        | sed -e 's/:/\//' -e 's/[^@]*@/https:\/\//' -e 's/\.git$//'
}

get_remote_http() {
    git config --get remote.$1.url \
        | sed -e 's/\.git$//'
}

get_remote_host() {
    # $1: http remote name
    # return "github" or "bitbucket"
    echo $1 \
        | awk -F[/.] '{print $3}'
}

get_upstream_branch() {
    # $1: remote alias name
    git branch -vv \
        | grep "^\*.*\[.*\]" \
        | head -1 \
        | sed -e 's/.*\['$1'\/\(.*\)\].*/\1/'
}

get_path_url() {
    # $1: relative or absolute path from current directory
    # return: relative path from .git directory
    git ls-tree --full-name --name-only HEAD $1
}

bitbucket() {
    target_url=()

    [ "${OPT_PR}" = 1 ] && target_url+=( "${REMOTE_URL}/pull-requests/new?source=${UPSTREAM_BRANCH}" )

    if [ "${argc}" -gt 0 ]; then
        for filename in "${argv[@]}"; do
            path_url=$(get_path_url ${filename})
            [ "${OPT_BRANCH}" = 1 ] \
                && target_url+=( "${REMOTE_URL}/src/HEAD/${path_url}?at=${UPSTREAM_BRANCH}" )

            [ "${OPT_COMMIT}" = 1 ] \
                && target_url+=( "${REMOTE_URL}/src/${COMMIT_ID}/${path_url}" )
        done
    else
        [ "${OPT_BRANCH}" = 1 ] \
            && target_url+=( "${REMOTE_URL}/branch/${UPSTREAM_BRANCH}" )

        [ "${OPT_COMMIT}" = 1 ] \
            && target_url+=( "${REMOTE_URL}/commits/${COMMIT_ID}" )
    fi

    [ "${#target_url[@]}" -eq 0 ] && target_url+=( "${REMOTE_URL}" )

    for url in "${target_url[@]}"; do
        if [ "${OPT_OPEN}" = 1 ]; then
            open $url
        else
            echo $url
        fi
    done
}

github() {
    target_url=()

    # TODO
#    [ "${OPT_PR}" = 1 ] && target_url+=( "${REMOTE_URL}/pull-requests/new?source=${UPSTREAM_BRANCH}" )

    if [ "${argc}" -gt 0 ]; then
        for filename in "${argv[@]}"; do
            path_url=$(get_path_url ${filename})
            [ "${OPT_BRANCH}" = 1 ] \
                && target_url+=( "${REMOTE_URL}/blob/${UPSTREAM_BRANCH}/${path_url}" )

            [ "${OPT_COMMIT}" = 1 ] \
                && target_url+=( "${REMOTE_URL}/blob/${COMMIT_ID}/${path_url}" )
        done
    else
        [ "${OPT_BRANCH}" = 1 ] \
            && target_url+=( "${REMOTE_URL}/tree/${UPSTREAM_BRANCH}" )

        [ "${OPT_COMMIT}" = 1 ] \
            && target_url+=( "${REMOTE_URL}/commit/${COMMIT_ID}" )
    fi

    [ "${#target_url[@]}" -eq 0 ] && target_url+=( "${REMOTE_URL}" )

    for url in "${target_url[@]}"; do
        if [ "${OPT_OPEN}" = 1 ]; then
            open $url
        else
            echo $url
        fi
    done
}

SSH_HTTP=$(judge_ssh_http ${REMOTE})

case "${SSH_HTTP}" in
    http )
        REMOTE_URL=$(get_remote_http ${REMOTE})
        ;;

    ssh )
        REMOTE_URL=$(get_remote_ssh ${REMOTE})
        ;;

    * )
        echo "${PROGNAME}: not supported" 1>&2
        exit 1
        ;;
esac

if [ "${argc}" -gt 0 -a "${OPT_COMMIT}" = 0 ]; then
    OPT_BRANCH=1
fi

REMOTE_HOST=$(get_remote_host "${REMOTE_URL}")

if [ "${OPT_BRANCH}" = 1 ]; then 
    UPSTREAM_BRANCH=$(get_upstream_branch "${REMOTE}")
    if [ -z "$UPSTREAM_BRANCH" ]; then
        echo "${PROGNAME}: no upstream on current branch" 1>&2
        exit 1
    fi
fi
    
COMMIT_ID=$(git show -s --format=%H)

case "${REMOTE_HOST}" in 
    bitbucket )
        bitbucket
        ;;

    github )
        github
        ;;
esac

